name: Pull Request Checks

on:
  pull_request:
    branches: [ main ]
    types: [ opened, synchronize, reopened ]

env:
  AWS_REGION: ap-southeast-2

jobs:
  validate-changes:
    name: Validate Changes
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        
    - name: Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        
    - name: Install cfn-lint
      run: |
        pip install cfn-lint
        cfn-lint --version
        
    - name: Lint changed CloudFormation templates
      run: |
        echo "Linting changed CloudFormation templates..."
        git diff --name-only ${{ github.event.pull_request.base.sha }} ${{ github.event.pull_request.head.sha }} | grep '\.yaml$' | while read file; do
          if [[ $file == cloudformation/** ]]; then
            echo "Linting $file"
            cfn-lint $file --region ${{ env.AWS_REGION }}
          fi
        done
        
    - name: Validate changed CloudFormation templates
      run: |
        echo "Validating changed CloudFormation templates..."
        git diff --name-only ${{ github.event.pull_request.base.sha }} ${{ github.event.pull_request.head.sha }} | grep '\.yaml$' | while read file; do
          if [[ $file == cloudformation/** ]]; then
            echo "Validating $file"
            aws cloudformation validate-template --template-body file://$file --region ${{ env.AWS_REGION }}
          fi
        done

  security-scan-pr:
    name: Security Scan PR
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        
    - name: Run Checkov security scan on changed files
      uses: bridgecrewio/checkov-action@master
      with:
        directory: cloudformation/
        framework: cloudformation
        output_format: sarif
        output_file_path: checkov-results.sarif
        soft_fail: true
        
    - name: Upload Checkov results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v2
      if: always()
      with:
        sarif_file: checkov-results.sarif

  test-scripts:
    name: Test Scripts
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        
    - name: Test script syntax
      run: |
        echo "Testing script syntax for changed files..."
        git diff --name-only ${{ github.event.pull_request.base.sha }} ${{ github.event.pull_request.head.sha }} | grep '\.sh$' | while read file; do
          if [[ $file == cloudformation/** ]]; then
            echo "Checking syntax: $file"
            bash -n "$file"
          fi
        done
        
    - name: Test JSON syntax
      run: |
        echo "Testing JSON syntax for changed files..."
        git diff --name-only ${{ github.event.pull_request.base.sha }} ${{ github.event.pull_request.head.sha }} | grep '\.json$' | while read file; do
          if [[ $file == cloudformation/** ]]; then
            echo "Validating JSON: $file"
            jq empty "$file"
          fi
        done

  check-deployment-order:
    name: Check Deployment Order
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        
    - name: Validate deployment dependencies
      run: |
        echo "Checking deployment dependencies..."
        
        # Check if VPC stack is referenced before being created
        vpc_files=$(git diff --name-only ${{ github.event.pull_request.base.sha }} ${{ github.event.pull_request.head.sha }} | grep 'cloudformation/.*\.yaml$' | grep -v 'vpc/')
        
        for file in $vpc_files; do
          if grep -q "Fn::ImportValue.*vpc-stack" "$file"; then
            echo "✅ $file correctly references VPC stack exports"
          fi
        done
        
        # Check if RDS stack is referenced before being created
        rds_files=$(git diff --name-only ${{ github.event.pull_request.base.sha }} ${{ github.event.pull_request.head.sha }} | grep 'cloudformation/.*\.yaml$' | grep -v 'rds/')
        
        for file in $rds_files; do
          if grep -q "Fn::ImportValue.*rds-stack" "$file"; then
            echo "✅ $file correctly references RDS stack exports"
          fi
        done

  generate-pr-summary:
    name: Generate PR Summary
    runs-on: ubuntu-latest
    needs: [validate-changes, security-scan-pr, test-scripts, check-deployment-order]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        
    - name: Generate PR summary
      run: |
        echo "## 📋 Pull Request Summary" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### 🔍 Changes Detected" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        
        # List changed CloudFormation files
        cf_files=$(git diff --name-only ${{ github.event.pull_request.base.sha }} ${{ github.event.pull_request.head.sha }} | grep 'cloudformation/.*\.yaml$' || true)
        if [ -n "$cf_files" ]; then
          echo "**CloudFormation Templates:**" >> $GITHUB_STEP_SUMMARY
          echo "$cf_files" | while read file; do
            echo "- \`$file\`" >> $GITHUB_STEP_SUMMARY
          done
          echo "" >> $GITHUB_STEP_SUMMARY
        fi
        
        # List changed scripts
        script_files=$(git diff --name-only ${{ github.event.pull_request.base.sha }} ${{ github.event.pull_request.head.sha }} | grep '\.sh$' || true)
        if [ -n "$script_files" ]; then
          echo "**Scripts:**" >> $GITHUB_STEP_SUMMARY
          echo "$script_files" | while read file; do
            echo "- \`$file\`" >> $GITHUB_STEP_SUMMARY
          done
          echo "" >> $GITHUB_STEP_SUMMARY
        fi
        
        # List changed JSON files
        json_files=$(git diff --name-only ${{ github.event.pull_request.base.sha }} ${{ github.event.pull_request.head.sha }} | grep '\.json$' || true)
        if [ -n "$json_files" ]; then
          echo "**JSON Files:**" >> $GITHUB_STEP_SUMMARY
          echo "$json_files" | while read file; do
            echo "- \`$file\`" >> $GITHUB_STEP_SUMMARY
          done
          echo "" >> $GITHUB_STEP_SUMMARY
        fi
        
        echo "### ✅ Validation Results" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "- **CloudFormation Linting:** ✅ Passed" >> $GITHUB_STEP_SUMMARY
        echo "- **Template Validation:** ✅ Passed" >> $GITHUB_STEP_SUMMARY
        echo "- **Security Scan:** ✅ Completed" >> $GITHUB_STEP_SUMMARY
        echo "- **Script Syntax:** ✅ Passed" >> $GITHUB_STEP_SUMMARY
        echo "- **JSON Syntax:** ✅ Passed" >> $GITHUB_STEP_SUMMARY
        echo "- **Deployment Dependencies:** ✅ Validated" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        
        echo "### 🚀 Deployment Impact" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "This PR will trigger deployment to:" >> $GITHUB_STEP_SUMMARY
        echo "- **Staging Environment** (develop branch)" >> $GITHUB_STEP_SUMMARY
        echo "- **Production Environment** (main branch)" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        
        echo "### 📝 Next Steps" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "1. Review the changes above" >> $GITHUB_STEP_SUMMARY
        echo "2. Check security scan results in the Security tab" >> $GITHUB_STEP_SUMMARY
        echo "3. Approve the PR to trigger deployment" >> $GITHUB_STEP_SUMMARY 